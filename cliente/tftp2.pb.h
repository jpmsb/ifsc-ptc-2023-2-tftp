// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tftp2.proto
// Protobuf C++ Version: 4.25.4

#ifndef GOOGLE_PROTOBUF_INCLUDED_tftp2_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tftp2_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tftp2_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tftp2_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tftp2_2eproto;
namespace tftp2 {
class FILE;
struct FILEDefaultTypeInternal;
extern FILEDefaultTypeInternal _FILE_default_instance_;
class ListItem;
struct ListItemDefaultTypeInternal;
extern ListItemDefaultTypeInternal _ListItem_default_instance_;
class ListResponse;
struct ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class MOVE;
struct MOVEDefaultTypeInternal;
extern MOVEDefaultTypeInternal _MOVE_default_instance_;
class Mensagem;
struct MensagemDefaultTypeInternal;
extern MensagemDefaultTypeInternal _Mensagem_default_instance_;
class PATH;
struct PATHDefaultTypeInternal;
extern PATHDefaultTypeInternal _PATH_default_instance_;
}  // namespace tftp2
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tftp2 {

// ===================================================================


// -------------------------------------------------------------------

class PATH final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tftp2.PATH) */ {
 public:
  inline PATH() : PATH(nullptr) {}
  ~PATH() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PATH(::google::protobuf::internal::ConstantInitialized);

  inline PATH(const PATH& from)
      : PATH(nullptr, from) {}
  PATH(PATH&& from) noexcept
    : PATH() {
    *this = ::std::move(from);
  }

  inline PATH& operator=(const PATH& from) {
    CopyFrom(from);
    return *this;
  }
  inline PATH& operator=(PATH&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PATH& default_instance() {
    return *internal_default_instance();
  }
  static inline const PATH* internal_default_instance() {
    return reinterpret_cast<const PATH*>(
               &_PATH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PATH& a, PATH& b) {
    a.Swap(&b);
  }
  inline void Swap(PATH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PATH* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PATH* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PATH>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PATH& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PATH& from) {
    PATH::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PATH* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tftp2.PATH";
  }
  protected:
  explicit PATH(::google::protobuf::Arena* arena);
  PATH(::google::protobuf::Arena* arena, const PATH& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required string path = 1;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:tftp2.PATH)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      23, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tftp2_2eproto;
};// -------------------------------------------------------------------

class MOVE final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tftp2.MOVE) */ {
 public:
  inline MOVE() : MOVE(nullptr) {}
  ~MOVE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MOVE(::google::protobuf::internal::ConstantInitialized);

  inline MOVE(const MOVE& from)
      : MOVE(nullptr, from) {}
  MOVE(MOVE&& from) noexcept
    : MOVE() {
    *this = ::std::move(from);
  }

  inline MOVE& operator=(const MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline MOVE& operator=(MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const MOVE* internal_default_instance() {
    return reinterpret_cast<const MOVE*>(
               &_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MOVE& a, MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MOVE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MOVE* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MOVE>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MOVE& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MOVE& from) {
    MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MOVE* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tftp2.MOVE";
  }
  protected:
  explicit MOVE(::google::protobuf::Arena* arena);
  MOVE(::google::protobuf::Arena* arena, const MOVE& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 1,
    kNewNameFieldNumber = 2,
  };
  // required string old_name = 1;
  bool has_old_name() const;
  void clear_old_name() ;
  const std::string& old_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_old_name(Arg_&& arg, Args_... args);
  std::string* mutable_old_name();
  PROTOBUF_NODISCARD std::string* release_old_name();
  void set_allocated_old_name(std::string* value);

  private:
  const std::string& _internal_old_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_name(
      const std::string& value);
  std::string* _internal_mutable_old_name();

  public:
  // required string new_name = 2;
  bool has_new_name() const;
  void clear_new_name() ;
  const std::string& new_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_name(Arg_&& arg, Args_... args);
  std::string* mutable_new_name();
  PROTOBUF_NODISCARD std::string* release_new_name();
  void set_allocated_new_name(std::string* value);

  private:
  const std::string& _internal_new_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_name(
      const std::string& value);
  std::string* _internal_mutable_new_name();

  public:
  // @@protoc_insertion_point(class_scope:tftp2.MOVE)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      35, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr old_name_;
    ::google::protobuf::internal::ArenaStringPtr new_name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tftp2_2eproto;
};// -------------------------------------------------------------------

class FILE final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tftp2.FILE) */ {
 public:
  inline FILE() : FILE(nullptr) {}
  ~FILE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FILE(::google::protobuf::internal::ConstantInitialized);

  inline FILE(const FILE& from)
      : FILE(nullptr, from) {}
  FILE(FILE&& from) noexcept
    : FILE() {
    *this = ::std::move(from);
  }

  inline FILE& operator=(const FILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline FILE& operator=(FILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const FILE* internal_default_instance() {
    return reinterpret_cast<const FILE*>(
               &_FILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FILE& a, FILE& b) {
    a.Swap(&b);
  }
  inline void Swap(FILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FILE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FILE* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FILE>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FILE& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FILE& from) {
    FILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FILE* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tftp2.FILE";
  }
  protected:
  explicit FILE(::google::protobuf::Arena* arena);
  FILE(::google::protobuf::Arena* arena, const FILE& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // required int64 size = 2;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tftp2.FILE)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      23, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int64_t size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tftp2_2eproto;
};// -------------------------------------------------------------------

class ListItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tftp2.ListItem) */ {
 public:
  inline ListItem() : ListItem(nullptr) {}
  ~ListItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListItem(::google::protobuf::internal::ConstantInitialized);

  inline ListItem(const ListItem& from)
      : ListItem(nullptr, from) {}
  ListItem(ListItem&& from) noexcept
    : ListItem() {
    *this = ::std::move(from);
  }

  inline ListItem& operator=(const ListItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListItem& operator=(ListItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListItem& default_instance() {
    return *internal_default_instance();
  }
  enum AnswerCase {
    kFile = 1,
    kDirectory = 2,
    ANSWER_NOT_SET = 0,
  };

  static inline const ListItem* internal_default_instance() {
    return reinterpret_cast<const ListItem*>(
               &_ListItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListItem& a, ListItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ListItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListItem& from) {
    ListItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tftp2.ListItem";
  }
  protected:
  explicit ListItem(::google::protobuf::Arena* arena);
  ListItem(::google::protobuf::Arena* arena, const ListItem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kDirectoryFieldNumber = 2,
  };
  // .tftp2.FILE file = 1;
  bool has_file() const;
  private:
  bool _internal_has_file() const;

  public:
  void clear_file() ;
  const ::tftp2::FILE& file() const;
  PROTOBUF_NODISCARD ::tftp2::FILE* release_file();
  ::tftp2::FILE* mutable_file();
  void set_allocated_file(::tftp2::FILE* value);
  void unsafe_arena_set_allocated_file(::tftp2::FILE* value);
  ::tftp2::FILE* unsafe_arena_release_file();

  private:
  const ::tftp2::FILE& _internal_file() const;
  ::tftp2::FILE* _internal_mutable_file();

  public:
  // .tftp2.PATH directory = 2;
  bool has_directory() const;
  private:
  bool _internal_has_directory() const;

  public:
  void clear_directory() ;
  const ::tftp2::PATH& directory() const;
  PROTOBUF_NODISCARD ::tftp2::PATH* release_directory();
  ::tftp2::PATH* mutable_directory();
  void set_allocated_directory(::tftp2::PATH* value);
  void unsafe_arena_set_allocated_directory(::tftp2::PATH* value);
  ::tftp2::PATH* unsafe_arena_release_directory();

  private:
  const ::tftp2::PATH& _internal_directory() const;
  ::tftp2::PATH* _internal_mutable_directory();

  public:
  void clear_answer();
  AnswerCase answer_case() const;
  // @@protoc_insertion_point(class_scope:tftp2.ListItem)
 private:
  class _Internal;
  void set_has_file();
  void set_has_directory();

  inline bool has_answer() const;
  inline void clear_has_answer();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union AnswerUnion {
      constexpr AnswerUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tftp2::FILE* file_;
      ::tftp2::PATH* directory_;
    } answer_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tftp2_2eproto;
};// -------------------------------------------------------------------

class ListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tftp2.ListResponse) */ {
 public:
  inline ListResponse() : ListResponse(nullptr) {}
  ~ListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListResponse(::google::protobuf::internal::ConstantInitialized);

  inline ListResponse(const ListResponse& from)
      : ListResponse(nullptr, from) {}
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListResponse& from) {
    ListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tftp2.ListResponse";
  }
  protected:
  explicit ListResponse(::google::protobuf::Arena* arena);
  ListResponse(::google::protobuf::Arena* arena, const ListResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .tftp2.ListItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::tftp2::ListItem* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::tftp2::ListItem >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::tftp2::ListItem>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::tftp2::ListItem>* _internal_mutable_items();
  public:
  const ::tftp2::ListItem& items(int index) const;
  ::tftp2::ListItem* add_items();
  const ::google::protobuf::RepeatedPtrField< ::tftp2::ListItem >&
      items() const;
  // @@protoc_insertion_point(class_scope:tftp2.ListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tftp2::ListItem > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tftp2_2eproto;
};// -------------------------------------------------------------------

class Mensagem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tftp2.Mensagem) */ {
 public:
  inline Mensagem() : Mensagem(nullptr) {}
  ~Mensagem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Mensagem(::google::protobuf::internal::ConstantInitialized);

  inline Mensagem(const Mensagem& from)
      : Mensagem(nullptr, from) {}
  Mensagem(Mensagem&& from) noexcept
    : Mensagem() {
    *this = ::std::move(from);
  }

  inline Mensagem& operator=(const Mensagem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mensagem& operator=(Mensagem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mensagem& default_instance() {
    return *internal_default_instance();
  }
  enum TipoCase {
    kList = 1,
    kMove = 2,
    kMkdir = 3,
    kListResponse = 4,
    TIPO_NOT_SET = 0,
  };

  static inline const Mensagem* internal_default_instance() {
    return reinterpret_cast<const Mensagem*>(
               &_Mensagem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Mensagem& a, Mensagem& b) {
    a.Swap(&b);
  }
  inline void Swap(Mensagem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mensagem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mensagem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mensagem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Mensagem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Mensagem& from) {
    Mensagem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Mensagem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tftp2.Mensagem";
  }
  protected:
  explicit Mensagem(::google::protobuf::Arena* arena);
  Mensagem(::google::protobuf::Arena* arena, const Mensagem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMoveFieldNumber = 2,
    kMkdirFieldNumber = 3,
    kListResponseFieldNumber = 4,
  };
  // .tftp2.PATH list = 1;
  bool has_list() const;
  private:
  bool _internal_has_list() const;

  public:
  void clear_list() ;
  const ::tftp2::PATH& list() const;
  PROTOBUF_NODISCARD ::tftp2::PATH* release_list();
  ::tftp2::PATH* mutable_list();
  void set_allocated_list(::tftp2::PATH* value);
  void unsafe_arena_set_allocated_list(::tftp2::PATH* value);
  ::tftp2::PATH* unsafe_arena_release_list();

  private:
  const ::tftp2::PATH& _internal_list() const;
  ::tftp2::PATH* _internal_mutable_list();

  public:
  // .tftp2.MOVE move = 2;
  bool has_move() const;
  private:
  bool _internal_has_move() const;

  public:
  void clear_move() ;
  const ::tftp2::MOVE& move() const;
  PROTOBUF_NODISCARD ::tftp2::MOVE* release_move();
  ::tftp2::MOVE* mutable_move();
  void set_allocated_move(::tftp2::MOVE* value);
  void unsafe_arena_set_allocated_move(::tftp2::MOVE* value);
  ::tftp2::MOVE* unsafe_arena_release_move();

  private:
  const ::tftp2::MOVE& _internal_move() const;
  ::tftp2::MOVE* _internal_mutable_move();

  public:
  // .tftp2.PATH mkdir = 3;
  bool has_mkdir() const;
  private:
  bool _internal_has_mkdir() const;

  public:
  void clear_mkdir() ;
  const ::tftp2::PATH& mkdir() const;
  PROTOBUF_NODISCARD ::tftp2::PATH* release_mkdir();
  ::tftp2::PATH* mutable_mkdir();
  void set_allocated_mkdir(::tftp2::PATH* value);
  void unsafe_arena_set_allocated_mkdir(::tftp2::PATH* value);
  ::tftp2::PATH* unsafe_arena_release_mkdir();

  private:
  const ::tftp2::PATH& _internal_mkdir() const;
  ::tftp2::PATH* _internal_mutable_mkdir();

  public:
  // .tftp2.ListResponse list_response = 4;
  bool has_list_response() const;
  private:
  bool _internal_has_list_response() const;

  public:
  void clear_list_response() ;
  const ::tftp2::ListResponse& list_response() const;
  PROTOBUF_NODISCARD ::tftp2::ListResponse* release_list_response();
  ::tftp2::ListResponse* mutable_list_response();
  void set_allocated_list_response(::tftp2::ListResponse* value);
  void unsafe_arena_set_allocated_list_response(::tftp2::ListResponse* value);
  ::tftp2::ListResponse* unsafe_arena_release_list_response();

  private:
  const ::tftp2::ListResponse& _internal_list_response() const;
  ::tftp2::ListResponse* _internal_mutable_list_response();

  public:
  void clear_tipo();
  TipoCase tipo_case() const;
  // @@protoc_insertion_point(class_scope:tftp2.Mensagem)
 private:
  class _Internal;
  void set_has_list();
  void set_has_move();
  void set_has_mkdir();
  void set_has_list_response();

  inline bool has_tipo() const;
  inline void clear_has_tipo();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union TipoUnion {
      constexpr TipoUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tftp2::PATH* list_;
      ::tftp2::MOVE* move_;
      ::tftp2::PATH* mkdir_;
      ::tftp2::ListResponse* list_response_;
    } tipo_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tftp2_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PATH

// required string path = 1;
inline bool PATH::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PATH::clear_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PATH::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.PATH.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PATH::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tftp2.PATH.path)
}
inline std::string* PATH::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:tftp2.PATH.path)
  return _s;
}
inline const std::string& PATH::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void PATH::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(value, GetArena());
}
inline std::string* PATH::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* PATH::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tftp2.PATH.path)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PATH::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.PATH.path)
}

// -------------------------------------------------------------------

// FILE

// required string name = 1;
inline bool FILE::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FILE::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FILE::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.FILE.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FILE::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tftp2.FILE.name)
}
inline std::string* FILE::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tftp2.FILE.name)
  return _s;
}
inline const std::string& FILE::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void FILE::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* FILE::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* FILE::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tftp2.FILE.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FILE::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.FILE.name)
}

// required int64 size = 2;
inline bool FILE::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FILE::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FILE::size() const {
  // @@protoc_insertion_point(field_get:tftp2.FILE.size)
  return _internal_size();
}
inline void FILE::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tftp2.FILE.size)
}
inline ::int64_t FILE::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void FILE::_internal_set_size(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// MOVE

// required string old_name = 1;
inline bool MOVE::has_old_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MOVE::clear_old_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.old_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MOVE::old_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.MOVE.old_name)
  return _internal_old_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MOVE::set_old_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.old_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tftp2.MOVE.old_name)
}
inline std::string* MOVE::mutable_old_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_old_name();
  // @@protoc_insertion_point(field_mutable:tftp2.MOVE.old_name)
  return _s;
}
inline const std::string& MOVE::_internal_old_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.old_name_.Get();
}
inline void MOVE::_internal_set_old_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.old_name_.Set(value, GetArena());
}
inline std::string* MOVE::_internal_mutable_old_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.old_name_.Mutable( GetArena());
}
inline std::string* MOVE::release_old_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tftp2.MOVE.old_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.old_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MOVE::set_allocated_old_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.old_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.old_name_.IsDefault()) {
          _impl_.old_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.MOVE.old_name)
}

// required string new_name = 2;
inline bool MOVE::has_new_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MOVE::clear_new_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MOVE::new_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.MOVE.new_name)
  return _internal_new_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MOVE::set_new_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tftp2.MOVE.new_name)
}
inline std::string* MOVE::mutable_new_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_name();
  // @@protoc_insertion_point(field_mutable:tftp2.MOVE.new_name)
  return _s;
}
inline const std::string& MOVE::_internal_new_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_name_.Get();
}
inline void MOVE::_internal_set_new_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_name_.Set(value, GetArena());
}
inline std::string* MOVE::_internal_mutable_new_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.new_name_.Mutable( GetArena());
}
inline std::string* MOVE::release_new_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tftp2.MOVE.new_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.new_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MOVE::set_allocated_new_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.new_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_name_.IsDefault()) {
          _impl_.new_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tftp2.MOVE.new_name)
}

// -------------------------------------------------------------------

// ListResponse

// repeated .tftp2.ListItem items = 1;
inline int ListResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int ListResponse::items_size() const {
  return _internal_items_size();
}
inline void ListResponse::clear_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.items_.Clear();
}
inline ::tftp2::ListItem* ListResponse::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tftp2.ListResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tftp2::ListItem>* ListResponse::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tftp2.ListResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::tftp2::ListItem& ListResponse::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.ListResponse.items)
  return _internal_items().Get(index);
}
inline ::tftp2::ListItem* ListResponse::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tftp2::ListItem* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:tftp2.ListResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tftp2::ListItem>& ListResponse::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tftp2.ListResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::tftp2::ListItem>&
ListResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::tftp2::ListItem>*
ListResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// ListItem

// .tftp2.FILE file = 1;
inline bool ListItem::has_file() const {
  return answer_case() == kFile;
}
inline bool ListItem::_internal_has_file() const {
  return answer_case() == kFile;
}
inline void ListItem::set_has_file() {
  _impl_._oneof_case_[0] = kFile;
}
inline void ListItem::clear_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (answer_case() == kFile) {
    if (GetArena() == nullptr) {
      delete _impl_.answer_.file_;
    }
    clear_has_answer();
  }
}
inline ::tftp2::FILE* ListItem::release_file() {
  // @@protoc_insertion_point(field_release:tftp2.ListItem.file)
  if (answer_case() == kFile) {
    clear_has_answer();
    auto* temp = _impl_.answer_.file_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.answer_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::FILE& ListItem::_internal_file() const {
  return answer_case() == kFile ? *_impl_.answer_.file_ : reinterpret_cast<::tftp2::FILE&>(::tftp2::_FILE_default_instance_);
}
inline const ::tftp2::FILE& ListItem::file() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.ListItem.file)
  return _internal_file();
}
inline ::tftp2::FILE* ListItem::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.ListItem.file)
  if (answer_case() == kFile) {
    clear_has_answer();
    auto* temp = _impl_.answer_.file_;
    _impl_.answer_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListItem::unsafe_arena_set_allocated_file(::tftp2::FILE* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_answer();
  if (value) {
    set_has_file();
    _impl_.answer_.file_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.ListItem.file)
}
inline ::tftp2::FILE* ListItem::_internal_mutable_file() {
  if (answer_case() != kFile) {
    clear_answer();
    set_has_file();
    _impl_.answer_.file_ = CreateMaybeMessage<::tftp2::FILE>(GetArena());
  }
  return _impl_.answer_.file_;
}
inline ::tftp2::FILE* ListItem::mutable_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tftp2::FILE* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:tftp2.ListItem.file)
  return _msg;
}

// .tftp2.PATH directory = 2;
inline bool ListItem::has_directory() const {
  return answer_case() == kDirectory;
}
inline bool ListItem::_internal_has_directory() const {
  return answer_case() == kDirectory;
}
inline void ListItem::set_has_directory() {
  _impl_._oneof_case_[0] = kDirectory;
}
inline void ListItem::clear_directory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (answer_case() == kDirectory) {
    if (GetArena() == nullptr) {
      delete _impl_.answer_.directory_;
    }
    clear_has_answer();
  }
}
inline ::tftp2::PATH* ListItem::release_directory() {
  // @@protoc_insertion_point(field_release:tftp2.ListItem.directory)
  if (answer_case() == kDirectory) {
    clear_has_answer();
    auto* temp = _impl_.answer_.directory_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.answer_.directory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::PATH& ListItem::_internal_directory() const {
  return answer_case() == kDirectory ? *_impl_.answer_.directory_ : reinterpret_cast<::tftp2::PATH&>(::tftp2::_PATH_default_instance_);
}
inline const ::tftp2::PATH& ListItem::directory() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.ListItem.directory)
  return _internal_directory();
}
inline ::tftp2::PATH* ListItem::unsafe_arena_release_directory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.ListItem.directory)
  if (answer_case() == kDirectory) {
    clear_has_answer();
    auto* temp = _impl_.answer_.directory_;
    _impl_.answer_.directory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListItem::unsafe_arena_set_allocated_directory(::tftp2::PATH* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_answer();
  if (value) {
    set_has_directory();
    _impl_.answer_.directory_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.ListItem.directory)
}
inline ::tftp2::PATH* ListItem::_internal_mutable_directory() {
  if (answer_case() != kDirectory) {
    clear_answer();
    set_has_directory();
    _impl_.answer_.directory_ = CreateMaybeMessage<::tftp2::PATH>(GetArena());
  }
  return _impl_.answer_.directory_;
}
inline ::tftp2::PATH* ListItem::mutable_directory() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tftp2::PATH* _msg = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:tftp2.ListItem.directory)
  return _msg;
}

inline bool ListItem::has_answer() const {
  return answer_case() != ANSWER_NOT_SET;
}
inline void ListItem::clear_has_answer() {
  _impl_._oneof_case_[0] = ANSWER_NOT_SET;
}
inline ListItem::AnswerCase ListItem::answer_case() const {
  return ListItem::AnswerCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Mensagem

// .tftp2.PATH list = 1;
inline bool Mensagem::has_list() const {
  return tipo_case() == kList;
}
inline bool Mensagem::_internal_has_list() const {
  return tipo_case() == kList;
}
inline void Mensagem::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void Mensagem::clear_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (tipo_case() == kList) {
    if (GetArena() == nullptr) {
      delete _impl_.tipo_.list_;
    }
    clear_has_tipo();
  }
}
inline ::tftp2::PATH* Mensagem::release_list() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.list)
  if (tipo_case() == kList) {
    clear_has_tipo();
    auto* temp = _impl_.tipo_.list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.tipo_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::PATH& Mensagem::_internal_list() const {
  return tipo_case() == kList ? *_impl_.tipo_.list_ : reinterpret_cast<::tftp2::PATH&>(::tftp2::_PATH_default_instance_);
}
inline const ::tftp2::PATH& Mensagem::list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.list)
  return _internal_list();
}
inline ::tftp2::PATH* Mensagem::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.list)
  if (tipo_case() == kList) {
    clear_has_tipo();
    auto* temp = _impl_.tipo_.list_;
    _impl_.tipo_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_list(::tftp2::PATH* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_tipo();
  if (value) {
    set_has_list();
    _impl_.tipo_.list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.list)
}
inline ::tftp2::PATH* Mensagem::_internal_mutable_list() {
  if (tipo_case() != kList) {
    clear_tipo();
    set_has_list();
    _impl_.tipo_.list_ = CreateMaybeMessage<::tftp2::PATH>(GetArena());
  }
  return _impl_.tipo_.list_;
}
inline ::tftp2::PATH* Mensagem::mutable_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tftp2::PATH* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.list)
  return _msg;
}

// .tftp2.MOVE move = 2;
inline bool Mensagem::has_move() const {
  return tipo_case() == kMove;
}
inline bool Mensagem::_internal_has_move() const {
  return tipo_case() == kMove;
}
inline void Mensagem::set_has_move() {
  _impl_._oneof_case_[0] = kMove;
}
inline void Mensagem::clear_move() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (tipo_case() == kMove) {
    if (GetArena() == nullptr) {
      delete _impl_.tipo_.move_;
    }
    clear_has_tipo();
  }
}
inline ::tftp2::MOVE* Mensagem::release_move() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.move)
  if (tipo_case() == kMove) {
    clear_has_tipo();
    auto* temp = _impl_.tipo_.move_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.tipo_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::MOVE& Mensagem::_internal_move() const {
  return tipo_case() == kMove ? *_impl_.tipo_.move_ : reinterpret_cast<::tftp2::MOVE&>(::tftp2::_MOVE_default_instance_);
}
inline const ::tftp2::MOVE& Mensagem::move() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.move)
  return _internal_move();
}
inline ::tftp2::MOVE* Mensagem::unsafe_arena_release_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.move)
  if (tipo_case() == kMove) {
    clear_has_tipo();
    auto* temp = _impl_.tipo_.move_;
    _impl_.tipo_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_move(::tftp2::MOVE* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_tipo();
  if (value) {
    set_has_move();
    _impl_.tipo_.move_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.move)
}
inline ::tftp2::MOVE* Mensagem::_internal_mutable_move() {
  if (tipo_case() != kMove) {
    clear_tipo();
    set_has_move();
    _impl_.tipo_.move_ = CreateMaybeMessage<::tftp2::MOVE>(GetArena());
  }
  return _impl_.tipo_.move_;
}
inline ::tftp2::MOVE* Mensagem::mutable_move() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tftp2::MOVE* _msg = _internal_mutable_move();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.move)
  return _msg;
}

// .tftp2.PATH mkdir = 3;
inline bool Mensagem::has_mkdir() const {
  return tipo_case() == kMkdir;
}
inline bool Mensagem::_internal_has_mkdir() const {
  return tipo_case() == kMkdir;
}
inline void Mensagem::set_has_mkdir() {
  _impl_._oneof_case_[0] = kMkdir;
}
inline void Mensagem::clear_mkdir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (tipo_case() == kMkdir) {
    if (GetArena() == nullptr) {
      delete _impl_.tipo_.mkdir_;
    }
    clear_has_tipo();
  }
}
inline ::tftp2::PATH* Mensagem::release_mkdir() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.mkdir)
  if (tipo_case() == kMkdir) {
    clear_has_tipo();
    auto* temp = _impl_.tipo_.mkdir_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.tipo_.mkdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::PATH& Mensagem::_internal_mkdir() const {
  return tipo_case() == kMkdir ? *_impl_.tipo_.mkdir_ : reinterpret_cast<::tftp2::PATH&>(::tftp2::_PATH_default_instance_);
}
inline const ::tftp2::PATH& Mensagem::mkdir() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.mkdir)
  return _internal_mkdir();
}
inline ::tftp2::PATH* Mensagem::unsafe_arena_release_mkdir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.mkdir)
  if (tipo_case() == kMkdir) {
    clear_has_tipo();
    auto* temp = _impl_.tipo_.mkdir_;
    _impl_.tipo_.mkdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_mkdir(::tftp2::PATH* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_tipo();
  if (value) {
    set_has_mkdir();
    _impl_.tipo_.mkdir_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.mkdir)
}
inline ::tftp2::PATH* Mensagem::_internal_mutable_mkdir() {
  if (tipo_case() != kMkdir) {
    clear_tipo();
    set_has_mkdir();
    _impl_.tipo_.mkdir_ = CreateMaybeMessage<::tftp2::PATH>(GetArena());
  }
  return _impl_.tipo_.mkdir_;
}
inline ::tftp2::PATH* Mensagem::mutable_mkdir() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tftp2::PATH* _msg = _internal_mutable_mkdir();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.mkdir)
  return _msg;
}

// .tftp2.ListResponse list_response = 4;
inline bool Mensagem::has_list_response() const {
  return tipo_case() == kListResponse;
}
inline bool Mensagem::_internal_has_list_response() const {
  return tipo_case() == kListResponse;
}
inline void Mensagem::set_has_list_response() {
  _impl_._oneof_case_[0] = kListResponse;
}
inline void Mensagem::clear_list_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (tipo_case() == kListResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.tipo_.list_response_;
    }
    clear_has_tipo();
  }
}
inline ::tftp2::ListResponse* Mensagem::release_list_response() {
  // @@protoc_insertion_point(field_release:tftp2.Mensagem.list_response)
  if (tipo_case() == kListResponse) {
    clear_has_tipo();
    auto* temp = _impl_.tipo_.list_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.tipo_.list_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tftp2::ListResponse& Mensagem::_internal_list_response() const {
  return tipo_case() == kListResponse ? *_impl_.tipo_.list_response_ : reinterpret_cast<::tftp2::ListResponse&>(::tftp2::_ListResponse_default_instance_);
}
inline const ::tftp2::ListResponse& Mensagem::list_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tftp2.Mensagem.list_response)
  return _internal_list_response();
}
inline ::tftp2::ListResponse* Mensagem::unsafe_arena_release_list_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tftp2.Mensagem.list_response)
  if (tipo_case() == kListResponse) {
    clear_has_tipo();
    auto* temp = _impl_.tipo_.list_response_;
    _impl_.tipo_.list_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Mensagem::unsafe_arena_set_allocated_list_response(::tftp2::ListResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_tipo();
  if (value) {
    set_has_list_response();
    _impl_.tipo_.list_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tftp2.Mensagem.list_response)
}
inline ::tftp2::ListResponse* Mensagem::_internal_mutable_list_response() {
  if (tipo_case() != kListResponse) {
    clear_tipo();
    set_has_list_response();
    _impl_.tipo_.list_response_ = CreateMaybeMessage<::tftp2::ListResponse>(GetArena());
  }
  return _impl_.tipo_.list_response_;
}
inline ::tftp2::ListResponse* Mensagem::mutable_list_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tftp2::ListResponse* _msg = _internal_mutable_list_response();
  // @@protoc_insertion_point(field_mutable:tftp2.Mensagem.list_response)
  return _msg;
}

inline bool Mensagem::has_tipo() const {
  return tipo_case() != TIPO_NOT_SET;
}
inline void Mensagem::clear_has_tipo() {
  _impl_._oneof_case_[0] = TIPO_NOT_SET;
}
inline Mensagem::TipoCase Mensagem::tipo_case() const {
  return Mensagem::TipoCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tftp2


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tftp2_2eproto_2epb_2eh
