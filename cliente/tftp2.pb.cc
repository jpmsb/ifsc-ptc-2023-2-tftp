// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tftp2.proto

#include "tftp2.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tftp2 {
template <typename>
PROTOBUF_CONSTEXPR PATH::PATH(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct PATHDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PATHDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PATHDefaultTypeInternal() {}
  union {
    PATH _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PATHDefaultTypeInternal _PATH_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FILE::FILE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.size_)*/ 0
} {}
struct FILEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FILEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FILEDefaultTypeInternal() {}
  union {
    FILE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FILEDefaultTypeInternal _FILE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MOVE::MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.new_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MOVEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MOVEDefaultTypeInternal() {}
  union {
    MOVE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MOVEDefaultTypeInternal _MOVE_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListResponse::ListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListResponseDefaultTypeInternal() {}
  union {
    ListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListResponseDefaultTypeInternal _ListResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListItem::ListItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.answer_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ListItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListItemDefaultTypeInternal() {}
  union {
    ListItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListItemDefaultTypeInternal _ListItem_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Mensagem::Mensagem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tipo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MensagemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MensagemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MensagemDefaultTypeInternal() {}
  union {
    Mensagem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MensagemDefaultTypeInternal _Mensagem_default_instance_;
}  // namespace tftp2
static ::_pb::Metadata file_level_metadata_tftp2_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tftp2_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tftp2_2eproto = nullptr;
const ::uint32_t TableStruct_tftp2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::tftp2::PATH, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tftp2::PATH, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tftp2::PATH, _impl_.path_),
    0,
    PROTOBUF_FIELD_OFFSET(::tftp2::FILE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tftp2::FILE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tftp2::FILE, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::tftp2::FILE, _impl_.size_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tftp2::MOVE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tftp2::MOVE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tftp2::MOVE, _impl_.old_name_),
    PROTOBUF_FIELD_OFFSET(::tftp2::MOVE, _impl_.new_name_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tftp2::ListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tftp2::ListResponse, _impl_.items_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tftp2::ListItem, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tftp2::ListItem, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tftp2::ListItem, _impl_.answer_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tftp2::Mensagem, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tftp2::Mensagem, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tftp2::Mensagem, _impl_.tipo_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::tftp2::PATH)},
        { 10, 20, -1, sizeof(::tftp2::FILE)},
        { 22, 32, -1, sizeof(::tftp2::MOVE)},
        { 34, -1, -1, sizeof(::tftp2::ListResponse)},
        { 43, -1, -1, sizeof(::tftp2::ListItem)},
        { 54, -1, -1, sizeof(::tftp2::Mensagem)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tftp2::_PATH_default_instance_._instance,
    &::tftp2::_FILE_default_instance_._instance,
    &::tftp2::_MOVE_default_instance_._instance,
    &::tftp2::_ListResponse_default_instance_._instance,
    &::tftp2::_ListItem_default_instance_._instance,
    &::tftp2::_Mensagem_default_instance_._instance,
};
const char descriptor_table_protodef_tftp2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013tftp2.proto\022\005tftp2\"\024\n\004PATH\022\014\n\004path\030\001 \002"
    "(\t\"\"\n\004FILE\022\014\n\004name\030\001 \002(\t\022\014\n\004size\030\002 \002(\005\"*"
    "\n\004MOVE\022\020\n\010old_name\030\001 \002(\t\022\020\n\010new_name\030\002 \002"
    "(\t\".\n\014ListResponse\022\036\n\005items\030\001 \003(\0132\017.tftp"
    "2.ListItem\"S\n\010ListItem\022\033\n\004file\030\001 \001(\0132\013.t"
    "ftp2.FILEH\000\022 \n\tdirectory\030\002 \001(\0132\013.tftp2.P"
    "ATHH\000B\010\n\006answer\"j\n\010Mensagem\022\033\n\004list\030\001 \001("
    "\0132\013.tftp2.PATHH\000\022\033\n\004move\030\002 \001(\0132\013.tftp2.M"
    "OVEH\000\022\034\n\005mkdir\030\003 \001(\0132\013.tftp2.PATHH\000B\006\n\004t"
    "ipo"
};
static ::absl::once_flag descriptor_table_tftp2_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tftp2_2eproto = {
    false,
    false,
    363,
    descriptor_table_protodef_tftp2_2eproto,
    "tftp2.proto",
    &descriptor_table_tftp2_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_tftp2_2eproto::offsets,
    file_level_metadata_tftp2_2eproto,
    file_level_enum_descriptors_tftp2_2eproto,
    file_level_service_descriptors_tftp2_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tftp2_2eproto_getter() {
  return &descriptor_table_tftp2_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tftp2_2eproto(&descriptor_table_tftp2_2eproto);
namespace tftp2 {
// ===================================================================

class PATH::_Internal {
 public:
  using HasBits = decltype(std::declval<PATH>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PATH, _impl_._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PATH::PATH(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tftp2.PATH)
}
PATH::PATH(const PATH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PATH* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tftp2.PATH)
}

inline void PATH::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PATH::~PATH() {
  // @@protoc_insertion_point(destructor:tftp2.PATH)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PATH::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void PATH::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PATH::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.PATH)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.path_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PATH::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tftp2.PATH.path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PATH::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.PATH)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string path = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "tftp2.PATH.path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.PATH)
  return target;
}

::size_t PATH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.PATH)
  ::size_t total_size = 0;

  // required string path = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PATH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PATH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PATH::GetClassData() const { return &_class_data_; }


void PATH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PATH*>(&to_msg);
  auto& from = static_cast<const PATH&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.PATH)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PATH::CopyFrom(const PATH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.PATH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PATH::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PATH::InternalSwap(PATH* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PATH::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tftp2_2eproto_getter, &descriptor_table_tftp2_2eproto_once,
      file_level_metadata_tftp2_2eproto[0]);
}
// ===================================================================

class FILE::_Internal {
 public:
  using HasBits = decltype(std::declval<FILE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FILE, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FILE::FILE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tftp2.FILE)
}
FILE::FILE(const FILE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FILE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.size_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:tftp2.FILE)
}

inline void FILE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.size_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FILE::~FILE() {
  // @@protoc_insertion_point(destructor:tftp2.FILE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FILE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void FILE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FILE::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.FILE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FILE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tftp2.FILE.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FILE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.FILE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "tftp2.FILE.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required int32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.FILE)
  return target;
}

::size_t FILE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tftp2.FILE)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 size = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_size());
  }

  return total_size;
}
::size_t FILE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.FILE)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());

    // required int32 size = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FILE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FILE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FILE::GetClassData() const { return &_class_data_; }


void FILE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FILE*>(&to_msg);
  auto& from = static_cast<const FILE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.FILE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FILE::CopyFrom(const FILE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.FILE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FILE::InternalSwap(FILE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FILE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tftp2_2eproto_getter, &descriptor_table_tftp2_2eproto_once,
      file_level_metadata_tftp2_2eproto[1]);
}
// ===================================================================

class MOVE::_Internal {
 public:
  using HasBits = decltype(std::declval<MOVE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MOVE, _impl_._has_bits_);
  static void set_has_old_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MOVE::MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tftp2.MOVE)
}
MOVE::MOVE(const MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_name_) {}

    , decltype(_impl_.new_name_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.old_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.old_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.old_name_.Set(from._internal_old_name(), _this->GetArenaForAllocation());
  }
  _impl_.new_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.new_name_.Set(from._internal_new_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tftp2.MOVE)
}

inline void MOVE::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_name_) {}

    , decltype(_impl_.new_name_) {}

  };
  _impl_.old_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.old_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MOVE::~MOVE() {
  // @@protoc_insertion_point(destructor:tftp2.MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MOVE::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_name_.Destroy();
  _impl_.new_name_.Destroy();
}

void MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.MOVE)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.old_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.new_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string old_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_old_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tftp2.MOVE.old_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required string new_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tftp2.MOVE.new_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MOVE::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.MOVE)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string old_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_old_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "tftp2.MOVE.old_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required string new_name = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_new_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "tftp2.MOVE.new_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.MOVE)
  return target;
}

::size_t MOVE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tftp2.MOVE)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string old_name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_old_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required string new_name = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_new_name());
  }

  return total_size;
}
::size_t MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.MOVE)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string old_name = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_old_name());

    // required string new_name = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_new_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MOVE::GetClassData() const { return &_class_data_; }


void MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MOVE*>(&to_msg);
  auto& from = static_cast<const MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.MOVE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_old_name(from._internal_old_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_new_name(from._internal_new_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MOVE::CopyFrom(const MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MOVE::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MOVE::InternalSwap(MOVE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.old_name_, lhs_arena,
                                       &other->_impl_.old_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_name_, lhs_arena,
                                       &other->_impl_.new_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tftp2_2eproto_getter, &descriptor_table_tftp2_2eproto_once,
      file_level_metadata_tftp2_2eproto[2]);
}
// ===================================================================

class ListResponse::_Internal {
 public:
};

ListResponse::ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tftp2.ListResponse)
}
ListResponse::ListResponse(const ListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tftp2.ListResponse)
}

inline void ListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListResponse::~ListResponse() {
  // @@protoc_insertion_point(destructor:tftp2.ListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_items()->~RepeatedPtrField();
}

void ListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.ListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_items()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tftp2.ListItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.ListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tftp2.ListItem items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.ListResponse)
  return target;
}

::size_t ListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.ListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tftp2.ListItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListResponse::GetClassData() const { return &_class_data_; }


void ListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListResponse*>(&to_msg);
  auto& from = static_cast<const ListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.ListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(from._internal_items());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListResponse::CopyFrom(const ListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_internal_items()))
    return false;
  return true;
}

void ListResponse::InternalSwap(ListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_items()->InternalSwap(other->_internal_mutable_items());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tftp2_2eproto_getter, &descriptor_table_tftp2_2eproto_once,
      file_level_metadata_tftp2_2eproto[3]);
}
// ===================================================================

class ListItem::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tftp2::ListItem, _impl_._oneof_case_);
  static const ::tftp2::FILE& file(const ListItem* msg);
  static const ::tftp2::PATH& directory(const ListItem* msg);
};

const ::tftp2::FILE&
ListItem::_Internal::file(const ListItem* msg) {
  return *msg->_impl_.answer_.file_;
}
const ::tftp2::PATH&
ListItem::_Internal::directory(const ListItem* msg) {
  return *msg->_impl_.answer_.directory_;
}
void ListItem::set_allocated_file(::tftp2::FILE* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_answer();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.answer_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.ListItem.file)
}
void ListItem::set_allocated_directory(::tftp2::PATH* directory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_answer();
  if (directory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(directory);
    if (message_arena != submessage_arena) {
      directory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directory, submessage_arena);
    }
    set_has_directory();
    _impl_.answer_.directory_ = directory;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.ListItem.directory)
}
ListItem::ListItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tftp2.ListItem)
}
ListItem::ListItem(const ListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_answer();
  switch (from.answer_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::tftp2::FILE::MergeFrom(
          from._internal_file());
      break;
    }
    case kDirectory: {
      _this->_internal_mutable_directory()->::tftp2::PATH::MergeFrom(
          from._internal_directory());
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tftp2.ListItem)
}

inline void ListItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.answer_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_answer();
}

ListItem::~ListItem() {
  // @@protoc_insertion_point(destructor:tftp2.ListItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_answer()) {
    clear_answer();
  }
}

void ListItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListItem::clear_answer() {
// @@protoc_insertion_point(one_of_clear_start:tftp2.ListItem)
  switch (answer_case()) {
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.answer_.file_;
      }
      break;
    }
    case kDirectory: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.answer_.directory_;
      }
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ANSWER_NOT_SET;
}


void ListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.ListItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_answer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tftp2.FILE file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tftp2.PATH directory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_directory(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListItem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.ListItem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (answer_case()) {
    case kFile: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::file(this),
          _Internal::file(this).GetCachedSize(), target, stream);
      break;
    }
    case kDirectory: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::directory(this),
          _Internal::directory(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.ListItem)
  return target;
}

::size_t ListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.ListItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (answer_case()) {
    // .tftp2.FILE file = 1;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.answer_.file_);
      break;
    }
    // .tftp2.PATH directory = 2;
    case kDirectory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.answer_.directory_);
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListItem::GetClassData() const { return &_class_data_; }


void ListItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListItem*>(&to_msg);
  auto& from = static_cast<const ListItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.ListItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.answer_case()) {
    case kFile: {
      _this->_internal_mutable_file()->::tftp2::FILE::MergeFrom(
          from._internal_file());
      break;
    }
    case kDirectory: {
      _this->_internal_mutable_directory()->::tftp2::PATH::MergeFrom(
          from._internal_directory());
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListItem::CopyFrom(const ListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.ListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListItem::IsInitialized() const {
  switch (answer_case()) {
    case kFile: {
      if (answer_case() == kFile) {
        if (!_impl_.answer_.file_->IsInitialized()) return false;
      }
      break;
    }
    case kDirectory: {
      if (answer_case() == kDirectory) {
        if (!_impl_.answer_.directory_->IsInitialized()) return false;
      }
      break;
    }
    case ANSWER_NOT_SET: {
      break;
    }
  }
  return true;
}

void ListItem::InternalSwap(ListItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.answer_, other->_impl_.answer_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tftp2_2eproto_getter, &descriptor_table_tftp2_2eproto_once,
      file_level_metadata_tftp2_2eproto[4]);
}
// ===================================================================

class Mensagem::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tftp2::Mensagem, _impl_._oneof_case_);
  static const ::tftp2::PATH& list(const Mensagem* msg);
  static const ::tftp2::MOVE& move(const Mensagem* msg);
  static const ::tftp2::PATH& mkdir(const Mensagem* msg);
};

const ::tftp2::PATH&
Mensagem::_Internal::list(const Mensagem* msg) {
  return *msg->_impl_.tipo_.list_;
}
const ::tftp2::MOVE&
Mensagem::_Internal::move(const Mensagem* msg) {
  return *msg->_impl_.tipo_.move_;
}
const ::tftp2::PATH&
Mensagem::_Internal::mkdir(const Mensagem* msg) {
  return *msg->_impl_.tipo_.mkdir_;
}
void Mensagem::set_allocated_list(::tftp2::PATH* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_tipo();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    _impl_.tipo_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.list)
}
void Mensagem::set_allocated_move(::tftp2::MOVE* move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_tipo();
  if (move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(move);
    if (message_arena != submessage_arena) {
      move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    _impl_.tipo_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.move)
}
void Mensagem::set_allocated_mkdir(::tftp2::PATH* mkdir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_tipo();
  if (mkdir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mkdir);
    if (message_arena != submessage_arena) {
      mkdir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mkdir, submessage_arena);
    }
    set_has_mkdir();
    _impl_.tipo_.mkdir_ = mkdir;
  }
  // @@protoc_insertion_point(field_set_allocated:tftp2.Mensagem.mkdir)
}
Mensagem::Mensagem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tftp2.Mensagem)
}
Mensagem::Mensagem(const Mensagem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mensagem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tipo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_tipo();
  switch (from.tipo_case()) {
    case kList: {
      _this->_internal_mutable_list()->::tftp2::PATH::MergeFrom(
          from._internal_list());
      break;
    }
    case kMove: {
      _this->_internal_mutable_move()->::tftp2::MOVE::MergeFrom(
          from._internal_move());
      break;
    }
    case kMkdir: {
      _this->_internal_mutable_mkdir()->::tftp2::PATH::MergeFrom(
          from._internal_mkdir());
      break;
    }
    case TIPO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tftp2.Mensagem)
}

inline void Mensagem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tipo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_tipo();
}

Mensagem::~Mensagem() {
  // @@protoc_insertion_point(destructor:tftp2.Mensagem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mensagem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_tipo()) {
    clear_tipo();
  }
}

void Mensagem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mensagem::clear_tipo() {
// @@protoc_insertion_point(one_of_clear_start:tftp2.Mensagem)
  switch (tipo_case()) {
    case kList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.tipo_.list_;
      }
      break;
    }
    case kMove: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.tipo_.move_;
      }
      break;
    }
    case kMkdir: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.tipo_.mkdir_;
      }
      break;
    }
    case TIPO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TIPO_NOT_SET;
}


void Mensagem::Clear() {
// @@protoc_insertion_point(message_clear_start:tftp2.Mensagem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_tipo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mensagem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tftp2.PATH list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tftp2.MOVE move = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tftp2.PATH mkdir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mkdir(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Mensagem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tftp2.Mensagem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (tipo_case()) {
    case kList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::list(this),
          _Internal::list(this).GetCachedSize(), target, stream);
      break;
    }
    case kMove: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::move(this),
          _Internal::move(this).GetCachedSize(), target, stream);
      break;
    }
    case kMkdir: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::mkdir(this),
          _Internal::mkdir(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tftp2.Mensagem)
  return target;
}

::size_t Mensagem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tftp2.Mensagem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (tipo_case()) {
    // .tftp2.PATH list = 1;
    case kList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tipo_.list_);
      break;
    }
    // .tftp2.MOVE move = 2;
    case kMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tipo_.move_);
      break;
    }
    // .tftp2.PATH mkdir = 3;
    case kMkdir: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tipo_.mkdir_);
      break;
    }
    case TIPO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mensagem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mensagem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mensagem::GetClassData() const { return &_class_data_; }


void Mensagem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mensagem*>(&to_msg);
  auto& from = static_cast<const Mensagem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tftp2.Mensagem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.tipo_case()) {
    case kList: {
      _this->_internal_mutable_list()->::tftp2::PATH::MergeFrom(
          from._internal_list());
      break;
    }
    case kMove: {
      _this->_internal_mutable_move()->::tftp2::MOVE::MergeFrom(
          from._internal_move());
      break;
    }
    case kMkdir: {
      _this->_internal_mutable_mkdir()->::tftp2::PATH::MergeFrom(
          from._internal_mkdir());
      break;
    }
    case TIPO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mensagem::CopyFrom(const Mensagem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tftp2.Mensagem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mensagem::IsInitialized() const {
  switch (tipo_case()) {
    case kList: {
      if (tipo_case() == kList) {
        if (!_impl_.tipo_.list_->IsInitialized()) return false;
      }
      break;
    }
    case kMove: {
      if (tipo_case() == kMove) {
        if (!_impl_.tipo_.move_->IsInitialized()) return false;
      }
      break;
    }
    case kMkdir: {
      if (tipo_case() == kMkdir) {
        if (!_impl_.tipo_.mkdir_->IsInitialized()) return false;
      }
      break;
    }
    case TIPO_NOT_SET: {
      break;
    }
  }
  return true;
}

void Mensagem::InternalSwap(Mensagem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tipo_, other->_impl_.tipo_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mensagem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tftp2_2eproto_getter, &descriptor_table_tftp2_2eproto_once,
      file_level_metadata_tftp2_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tftp2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tftp2::PATH*
Arena::CreateMaybeMessage< ::tftp2::PATH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::PATH >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::FILE*
Arena::CreateMaybeMessage< ::tftp2::FILE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::FILE >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::MOVE*
Arena::CreateMaybeMessage< ::tftp2::MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::ListResponse*
Arena::CreateMaybeMessage< ::tftp2::ListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::ListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::ListItem*
Arena::CreateMaybeMessage< ::tftp2::ListItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::ListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::tftp2::Mensagem*
Arena::CreateMaybeMessage< ::tftp2::Mensagem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tftp2::Mensagem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
